// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate


/*
____                          _____       ____         ______
|       \   |         |        /               |        \     |
|____/   |         |       \____        |_____/     |____
|    \      |         |                 \      |               |
|      \     \ _ _ /        _____/      |               |______

"Burning your phone is illegal"

*/

#include "fragmentVersionCentroid.h"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

varying float cD;
varying vec4 color;
varying highp vec3 look;
varying highp vec3 position;
varying float Lev; 
varying vec3 cotf;
float map(float value, float min1, float max1, float min2, float max2) {
  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}
float dist2D(float x1, float y1, float x2, float y2){
	return sqrt(pow(x2-x1, 2.)+pow(y2-y1, 2.));
}
float inrect(vec2 pos, float x1, float y1, float x2, float y2, float focus){
 return min(1.0, max(min(min(pos.x - x1, x2 - pos.x), min(pos.y - y1, y2 - pos.y)), 0.0) / focus);
}

//Player shadow
float playershadow(){
vec3 lookvector=look;
lookvector.x*=2.0;
 vec3 pos = lookvector + vec3(0.4, 0.4, 0.4); 
 vec3 dir = vec3(-1.0, (1.25) * 0.31, 0.0);
 float factor = 1.0;
 if (pos.x < 0.2){
  factor = max(0.0, pos.x / 0.4 + 0.5);
 }
pos += dir * pos.x;
 float focus = .04;
 float footwalk = sin((position.x - lookvector.x) * 2.0 + (position.z - lookvector.z) * 2.0);
float handswalk = sin((position.x - lookvector.x) * 2.0 + (position.z - lookvector.z)) * .5;
pos.yz -= vec2(.2, .4);
 float body = max(inrect(pos.yz, -1.5 + footwalk*.4, -0.25, 0.75, .1, focus), inrect(pos.yz, -1.5 - footwalk*.4, -.1, 0.75, 0.25, focus));
 float hands = max(inrect(pos.yz, -0.5 + footwalk * .1, -0.5, 0.25, .1, focus), inrect(pos.yz, -0.5 - footwalk * 0.1, -.1, 0.25, 0.5, focus));
 return min(1.0, max(body, hands)) * factor;
}


#ifdef FOG
varying vec4 fogColor;
#endif

#include "uniformShaderConstants.h"
#include "util.h"
#include "Shader_Settings/settings.glsl"
uniform vec2 FOG_CONTROL;
uniform vec4 TILE_LIGHT_COLOR;
uniform float RENDER_DISTANCE;
LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

vec3 day_light = vec3(1.4,1.5,1.6);
vec3 moon_Color = vec3(0.025, 0.06, 0.08)*0.15;
vec3 sun_Sunset = vec3(0.6,0.3,0.0);

#ifndef BYPASS_PIXEL_SHADER
vec4 moonLight(vec4 light, float null){

float amount = 1.0;
float colorDesat = dot(light.rgb, vec3(9.9));
float test = 1.0;

light.rgb = mix(light.rgb, vec3(colorDesat) * moon_Color, amount * null);

return light;
}

vec4 dayLight(vec4 light, float null){

vec4 lum_day = light * vec4(vec3(day_light), 1.0);
vec4 final_day = lum_day;

return final_day;
}

vec4 sunLight(vec4 light, float null){
float sunset = (light.r + light.g + light.b) / 1.5;

return mix( light, vec4 (sunset * sun_Sunset.r, sunset * sun_Sunset.g, sunset * sun_Sunset.b, light.a), null);
}

vec4 lightMap(vec4 light, vec2 curr, float setLight){

float notlight = (1.0 - uv1.x);
float day = uv1.y * 0.75 * setLight;
float sun = (0.5-abs(0.5-setLight))*notlight*uv1.y;
float night = uv1.y * notlight *0.95*(1.0-setLight);

return sunLight(dayLight(moonLight(light,night),day),sun);
}


#endif
void main()
{
#ifdef BYPASS_PIXEL_SHADER
	gl_FragColor = vec4(0, 0, 0, 0);
	return;
#else 
vec4 diffuse = texture2D(TEXTURE_0, uv0);
vec4 transf = texture2D( TEXTURE_1,vec2(0.0, 1.0));
float setLight = (transf.r - 0.5) / 0.5; 
setLight = max (0.0, min(1.0, setLight));
float fog_flag = 0.0;
//Water
if(color.r < color.b && color.a < 0.95){ 
	float watercol = (sin((position.x*3.141592)+sin(position.z))*(Lev))*3.14;
	if(water){diffuse.rgb += watercol;}
	diffuse.a = 0.5;
	if(watercol > 0.04){
	    if(look.z > (sin((look.x*2.1)+look.z)*0.5)-2. && look.z < (cos((look.x*2.1)+look.z)*0.5)+2. && water_reflection){
			diffuse.a = 1.;
		    diffuse.rgb += (32.)*cotf;
	    }
	
	}
	
	//float cloudReflection = clo;
}
if(Lev > 0.0 && !(color.r < color.b && color.a < 0.95)){
	float watercol = (sin((position.x*3.141592)+sin(position.z))*Lev)*3.456;
	diffuse.rgb += watercol*1.1;
}
//diffuse.rgb += watercol;
#ifdef SEASONS_FAR
	diffuse.a = 1.0;
#endif

  //Light color
  float torche = .5;
  if(cotf.r > cotf.b && cotf.r < 0.5 && cotf.b < 0.2){ 
     diffuse.rgb += nether_light_color * torche * uv1.x;
   }else{
 	 diffuse.rgb += light_color * torche * uv1.x; 
   }
//  diffuse.rgb += cotf * torche * uv1.x;
   

#if USE_ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
	#define ALPHA_THRESHOLD 0.05
	#else
	#define ALPHA_THRESHOLD 0.5
	#endif
	if(diffuse.a < ALPHA_THRESHOLD)
		discard;
#endif
	
vec4 inColor = color;

#if defined(BLEND)
	diffuse.a *= inColor.a;
  float AFO = clamp(cD, 0., 1.);
  diffuse.a = mix(diffuse.a, 1., AFO);
#endif

if(FOG_CONTROL.x < 0.55 && FOG_CONTROL.x > 0.1){
fog_flag = 1.0;
}

#ifndef SEASONS
	#if !USE_ALPHA_TEST && !defined(BLEND)
		diffuse.a = inColor.a;
	#endif
	
	diffuse.rgb *= inColor.rgb;
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
#endif
float s = 1.0;
if(fog_flag == 0.0)
{

#ifndef ALPHA_TEST
if (inColor.a > 0.0)
{
 diffuse.rgb += vec3(.1, .06, .028);
}
#endif

//Player shadow
if(player_shadow){
vec2 uvl=uv1;
uvl.y-=playershadow()*.4;
diffuse *= texture2D(TEXTURE_1, uvl);
}
//diffuse.rgb -= playershadow()*.2;
if(uv1.y <= 0.87)
{
//s = 1.0;
//Block shadow
vec3 shadow = vec3(0.93,0.93,0.93);
vec3 tlight  = vec3(1.092) * max(0.93, pow(uv1.x, .1));

vec3 shadows = shadow;
vec3 tlights = tlight;
if(uv1.y <= 0.868)
{
shadows *= shadow;
tlights *= tlight;
s = 0.8;
}
if(uv1.y <= 0.866)
{
shadows *= shadow;
tlights *= tlight;
s = 0.7;
}
if(uv1.y <= 0.864)
{
shadows *= shadow;
tlights *= tlight;
s = 0.6;
}
if(uv1.y <= 0.862)
{
shadows *= shadow;
tlights *= tlight;
s = 0.5;
}
if(uv1.y <= 0.86)
{
shadows *= shadow;
tlights *= tlight;
s = 0.4;
}
if(uv1.y <= 0.858)
{
shadows *= shadow;
tlights *= tlight;
s = 0.3;
}
if(uv1.y <= 0.856)
{
shadows *= shadow;
tlights *= tlight;
s = 0.2;
}
if(uv1.y <= 0.854)
{
shadows *= shadow;
tlights *= tlight;
s = 0.1;
}
if(uv1.y <= 0.852) //0.852
{
shadows *= shadow;
tlights *= tlight;
s=0.0;
}
if(block_shadow){
diffuse.rgb *= shadows * tlights;
}
}
}else{
  diffuse *= texture2D(TEXTURE_1, uv1);
  diffuse.rgb *= vec3(0.9);
}
if(look.z < 1.-(look.y+1.) && look.z > -1.+(look.y+1.) && look.x < -2.-(look.y+1.) && look.x >-4.+(look.y+1.) && sun_reflection){
	float dtc = (1.-(look.y+1.))-abs(dist2D(0.,-3., look.z, look.x));
	float fc = (map(dtc, 0., 1.-(look.y+1.), 1., 2.)*s);
	if(fc >= 1.0){
	   diffuse.rgb *= fc;
	}
}
#ifdef FOG
    //                                                                            nice
	diffuse.rgb = mix( diffuse.rgb, fogColor.rgb * .69, fogColor.a );
#endif

//for debugging
//diffuse = color;


	gl_FragColor = lightMap(diffuse, uv1, setLight);
	
#endif // BYPASS_PIXEL_SHADER
}