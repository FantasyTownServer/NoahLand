// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.


/*
____                          _____       ____         ______
|       \   |         |        /               |        \     |
|____/   |         |       \____        |_____/     |____
|    \      |         |                 \      |               |
|      \     \ _ _ /        _____/      |               |______

"Burning your phone is illegal"
                 
*/

#include "vertexVersionCentroid.h"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		_centroid out vec2 uv0;
		_centroid out vec2 uv1;
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

#ifndef BYPASS_PIXEL_SHADER
	varying vec4 color;
#endif

#ifdef FOG
	varying vec4 fogColor;
#endif

#include "uniformWorldConstants.h"
#include "uniformPerFrameConstants.h"
#include "uniformShaderConstants.h"
#include "uniformRenderChunkConstants.h"
#include "Shader_Settings/settings.glsl"
attribute POS4 POSITION;
attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;
varying highp vec3 position;
varying highp vec3 look;
varying float cD;
varying float Lev;
varying vec3 cotf;
const float rA = 1.0;
const float rB = 1.0;
const vec3 UNIT_Y = vec3(0,1,0);
const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange


bool DetectedNether(vec4 likefogcontrol){
if(likefogcontrol.r > likefogcontrol.b && likefogcontrol.r < 0.5 && likefogcontrol.b < 0.2){
return true;
} else {
return false;}
}
float map(float value, float min1, float max1, float min2, float max2) {
  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}
void main()
{
    POS4 worldPos;
#ifdef AS_ENTITY_RENDERER
		POS4 pos = WORLDVIEWPROJ * POSITION;
		worldPos = pos;
#else
    worldPos.xyz = (POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
    worldPos.w = 1.0;

    // Transform to view space before projection instead of all at once to avoid floating point errors
    // Not required for entities because they are already offset by camera translation before rendering
    // World position here is calculated above and can get huge
    POS4 pos = WORLDVIEW * worldPos;
    pos = PROJ * pos;
#endif
    gl_Position = pos;

#ifndef BYPASS_PIXEL_SHADER
    uv0 = TEXCOORD_0;
    uv1 = TEXCOORD_1;
	color = COLOR;
#endif


float wave_ = 0.0;
if(!DetectedNether(FOG_COLOR))
{
 wave_ = 1.0;
}

///// find distance from the camera

#if defined(FOG) || defined(BLEND)
	#ifdef FANCY
		vec3 relPos = -worldPos.xyz;
		float cameraDepth = length(relPos);
	#else
		float cameraDepth = pos.z;
	#endif
#endif

//POS3 gerak = worldPos.xyz + VIEW_POS;
POS3 gerak = POSITION.xyz*0.7853981;
#ifdef ALPHA_TEST 
#ifndef BYPASS_PIXEL_SHADER

if(color.g + color.g > color.r + color.b && wave_ == 1.0 && plant_waves){
gl_Position.xy += (sin(TIME * 4.0 + gerak.x+gerak.y+gerak.z+cos(TIME*2.5)) * sin(gerak.x) * 0.03);
}
#endif
#endif

#ifdef FANCY  /////enhance water
#ifndef BYPASS_PIXEL_SHADER
//Gerak Air
Lev = 0.0;
//float wavewater = sin((TIME * 3.)+gerak.z+gerak.x+gerak.y) * .05;
if((color.b > color.r && color.a < 0.95 && color.g > color.r) && wave_ == 1.0){          
	      float wavewater = sin((TIME * 3.5 + 2.0 * gerak.x + 2.0 * gerak.y + gerak.z)) * 0.04 * 1.0 * (sin(gerak.x+gerak.y+gerak.z)+1.);
          if(water_waves){
            gl_Position.y += wavewater;
          }
          Lev = wavewater;
        //  color.a *= 0.5;	
 }
//Gerak Dalam Air
if((FOG_COLOR.r < FOG_COLOR.b && FOG_COLOR.b-FOG_COLOR.r > FOG_COLOR.g && FOG_CONTROL.x < 0.15) && wave_ == 1.0){
if(uw_waves){
gl_Position.x += sin((TIME * 1.5)+gerak.z+gerak.x+gerak.y) * .05;
gl_Position.y += sin((TIME * 3.)+gerak.z+gerak.x+gerak.y) * .05;
}
if(under_water){
Lev = sin(TIME * 3.5 + 2.0 * gerak.x + 2.0 * gerak.y + gerak.z) * 0.04 * 1.0 * (sin(gerak.x+gerak.y+gerak.z)+1.);
}
}
#endif
#endif //FANCY

#ifdef FOG
	float len = cameraDepth / RENDER_DISTANCE;
	#ifdef ALLOW_FADE
		len += RENDER_CHUNK_FOG_ALPHA;
	#endif

    fogColor.rgb = FOG_COLOR.rgb;
	fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
#endif

///// blended layer (mostly water) magic
#ifdef BLEND
	//Mega hack: only things that become opaque are allowed to have vertex-driven transparency in the Blended layer...
	//to fix this we'd need to find more space for a flag in the vertex format. color.a is the only unused part
	bool shouldBecomeOpaqueInTheDistance = color.a < 0.95;
	if(shouldBecomeOpaqueInTheDistance) {
		#ifdef FANCY  /////enhance water
			float cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
       cD = cameraDist;
			color = COLOR;
		#else
			// Completely insane, but if I don't have these two lines in here, the water doesn't render on a Nexus 6
			vec4 surfColor = vec4(color.rgb, 1.0);
			color = surfColor;
				
			vec3 relPos = -worldPos.xyz;
			float camDist = length(relPos);
			float cameraDist = camDist / FAR_CHUNKS_DISTANCE;
       cD = cameraDist;
		#endif //FANCY
		
		float alphaFadeOut = clamp(cameraDist, 0.0, 1.0);
		color.a = mix(color.a, 1.0, alphaFadeOut);
	}
	
#endif

#ifndef BYPASS_PIXEL_SHADER
	#ifndef FOG
		// If the FOG_COLOR isn't used, the reflection on NVN fails to compute the correct size of the constant buffer as the uniform will also be gone from the reflection data
		color.rgb += FOG_COLOR.rgb * 0.000001;
	#endif
#endif

//For the fragment shade

position = POSITION.xyz + VIEW_POS.xyz;
look = worldPos.xyz;
cotf = FOG_COLOR.rgb;
}